version:2.0.0
desc:Retro Fuzz [V2]
author: Stephen Boyes
about:
  # Retro Fuzz
  High gain distortion.
  easy to use.
changelog:
  - Use exp() instead of $e^


slider1:ingain_db=0<0,15,1>input gain
slider7:outgain_db=0<-18,6,0.2>output gain

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
last_ingain=10^(ingain_db/20);
last_outgain=10^(outgain_db/20);

function logistic_softclip(x)
(
x >= 0.5 ? x = 1/(1+exp((-4*(x-0.5))));
x <= -0.5 ? x = -1/(1+exp((4*(x+0.5))));
x
);

function svf_lowp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 0;
 m2 = 1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);


function svf_highp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 1;
 m1 = -k;
 m2 = -1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);


function diode_clipper(x)
local(f)
(
f = min(1,max(-1,x));
x*sin(($pi/2)*f)^12
);

@slider
next_ingain=10^(ingain_db/20);
next_outgain=10^(outgain_db/20);

@block
d_ingain = (next_ingain - last_ingain)/samplesblock;
d_outgain = (next_outgain - last_outgain)/samplesblock;

@sample
spl0 *= last_ingain;
spl1 *= last_ingain;
last_ingain += d_ingain;



spl0 *=12;
spl1 *=12;

//DC leakage
spl0 += 0.018*bias0;
spl1 += 0.018*bias1;

//stage1
capres0 = c0;
capres1 = c1;
d0 = c0.diode_clipper(c0);  d0 = leftlow.svf_lowp(d0,7000,0.67);
d1 = c1.diode_clipper(c1);  d1 = righlow.svf_lowp(d1,7000,0.67);
c0 = 0.3*capres0 + 0.7*d0;
c1 = 0.3*capres1 + 0.7*d1;
c0 = spl0 - 0.618*c0;
c1 = spl1 - 0.618*c1;
spl0 = c0;
spl1 = c1;

//DC generator
bias0 = sqrt(0.018+spl0^2);  bias0 = bi0.svf_lowp(bias0,360,0.67);
bias1 = sqrt(0.018+spl1^2);  bias1 = bi1.svf_lowp(bias1,360,0.67);

//Highpass capacitor
spl0 = DC0.svf_highp(spl0,75,0.33);
spl1 = DC1.svf_highp(spl1,75,0.33);

//aafilter
spl0 = aa0.svf_lowp(spl0,8000,0.25);
spl1 = aa1.svf_lowp(spl1,8000,0.25);

// transistor saturation1
spl0 = logl.logistic_softclip(spl0);
spl1 = logr.logistic_softclip(spl1);

//aafilter
spl0 = aa00.svf_lowp(spl0,9000,0.25);
spl1 = aa11.svf_lowp(spl1,9000,0.25);

//Highpass capacitor
spl0 = DC2.svf_highp(5*spl0,50,0.33);
spl1 = DC3.svf_highp(5*spl1,50,0.33);

//DC leakage
spl0 += 0.25*bias0;
spl1 += 0.25*bias1;

//stage2
capres00 = c00;
capres11 = c11;
d00 = c00.diode_clipper(c00);  d00 = leftlow2.svf_lowp(d00,7000,0.67);
d11 = c11.diode_clipper(c11);  d11 = righlow2.svf_lowp(d11,7000,0.67);
c00 = 0.3*capres00 + 0.7*d00;
c11 = 0.3*capres11 + 0.7*d11;
c00 = spl0 - 0.6*c00;
c11 = spl1 - 0.6*c11;
spl0 = 0.618*c00;
spl1 = 0.618*c11;

// transistor saturation2
spl0 = log2l.logistic_softclip(2*spl0);
spl1 = log2r.logistic_softclip(2*spl1);

//DC block
spl0 = DC4.svf_highp(spl0,75,0.67);
spl1 = DC5.svf_highp(spl1,75,0.67);

spl0 *=0.25;
spl1 *=0.25;

spl0 *= last_outgain;
spl1 *= last_outgain;
last_outgain += d_outgain;
