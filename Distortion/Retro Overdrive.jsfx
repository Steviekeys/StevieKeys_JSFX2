version:2.0.6
desc:Retro Overdrive
provides:
  Retro_Overdrive/RetroOverdrive background.png
  Retro_Overdrive/RetroOverdrive text.png  
  Retro_Overdrive/RetroOverdrive knob 90x90.png
author:Stephen Boyes
about:
  # my attempt at making a overdrive peddle driving a tube amp.
  Add a speaker emulation for guitar tones or apply it to other sounds in your mix.
changelog:
  - v1.1 fix click from dc offset
  - v1.2 fix dc offset not always starting
  - v1.3.0 DC filter at 10Hz for all sample rates
  - v1.3.1 Add about header
  - v1.3.2 non release GUI
  - v2.0.0 new GUI
  - v2.0.1 Fixed slider bug
  - v2.0.6 fix for png files not found typo
// DC filter from JSFX DC filter
// SVF filter from Andy Simper of Cytomics


options:gfx_hz=60
tags:distortion



filename:0,Retro_Overdrive/RetroOverdrive background.png
filename:1,Retro_Overdrive/RetroOverdrive text.png
filename:2,Retro_Overdrive/RetroOverdrive knob 90x90.png


slider1:in_gain_db=0<-15,15,0.1>-Input (dB)
slider2:OD_gain_db=0<0,20,0.1>-Overdrive
slider3:gain_db=0<-15,15,0.1>-Amp Gain (dB)
slider4:out_gain_db=0<-20,20,0.1>Output (dB)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
last_in_gain=10^(in_gain_db/20);
last_OD_gain=10^(OD_gain_db/20);
last_gain=10^(gain_db/20);
last_out_gain=10^(out_gain_db/20);
DCx = 0.32;  DCy = 0.1;  DCz = 0.387;
startup = 2^-100;
Fc = 10/srate;
a = exp(-2*$pi*Fc);
b = 1-a;

function tube_clip(x)
instance (f,f1,f2,f3,f4)
(
x = x*0.8;
f = max(-1,min(1,x));
f1 = sign(x)*abs(x)^(2/3);
f2 = (3*f - f^3)*0.5;
f3 = abs(sin(($pi/2)*f))^(3/2);
f4 = f1*f3 + f2*(1-f3);
f4 * 0.9
);


function diode(x) instance(out,lastx,diodex,f1)
(
diodex *= 0.34;
loop(6,
diodex *= rand(2)*0.000004+0.999996;
out = 1*x - diodex*0.618;
lastx = out;
f1 = max(-1,min(1,lastx))*($pi/2);
diodex = lastx*0.7071 - sin(f1);
out
);
out
);

function svf_lowp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 0;
 m2 = 1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);

   /******************************* GUI Function ***********************************/

  function xy(x y)
             ( gfx_x = x; gfx_y = y; );
   
  function rgb(r g b)
              ( gfx_r = r; gfx_g = g; gfx_b = b; );
   
  function button_rect(x,y,w,h)
  (
    mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h ? (
    this.button = 1111;
    ):(
    this.button = 0;
    );
  );

  function mouse_on()//instance(count)
  (
  1 && mouse_cap ? count += 1 : count = 0;
  count > 0 && count < 2 ? m_on =1 : m_on = 0;
  m_on
  );
  
  function mouse_off()
  (
  1 && mouse_cap ? m_off = 0 : m_off = 1;
  m_off
  );
  
  function y_drag(area,cap,m_on,m_off)local(area,cap)instance(up,down,storeY,area,click,cap)
  (
  area && m_on ? area = 1 : area = 0;
  area && mouse_cap && cap ? click = 1;
  m_off == 1 ? click = 0;
  click ? (
    mouse_y < storeY ? (up = 1; down = 0;);
    mouse_y > storeY ? (up = 0; down = 1;);
  );
  mouse_cap != cap ? click = 0;
  storeY == mouse_y ? up=down=0;
  storeY = mouse_y;
  );
  
function mysliders()
(
next_in_gain=10^(in_gain_db/20);
next_OD_gain=10^(OD_gain_db/20);
next_gain=10^(gain_db/20);
next_out_gain=10^(out_gain_db/20);
);

@slider


@block
  mysliders();
  d_in_gain = (next_in_gain - last_in_gain)/samplesblock;
  d_OD_gain = (next_OD_gain - last_OD_gain)/samplesblock;
  d_gain = (next_gain - last_gain)/samplesblock;
  d_out_gain = (next_out_gain - last_out_gain)/samplesblock;




@sample
rando = rand(1)*0.0015;

//Tube warmup!
startup < 1 ? (
DCx *= startup;  DCy *= startup;  DCz *= startup;  startup *= 2;
):(
DCx = 0.32;  DCy = 0.1;  DCz = 0.387;
);


//input
spl0 *= last_in_gain;  spl1 *= last_in_gain;


//diode soft clip
spl0 *= last_OD_gain;
spl1 *= last_OD_gain;
spl0 *= 0.5;
spl1 *= 0.5;
spl0 = le.diode(spl0);
spl1 = ri.diode(spl1);
spl0 /= sqrt(last_OD_gain);
spl1 /= sqrt(last_OD_gain);


//amp gain
spl0 *= last_gain;  spl1 *= last_gain;


//tube amp
spl0 = t0.tube_clip(spl0-DCx-bias0*0.42);  spl0 = min(1.5-rando,spl0);
spl1 = t1.tube_clip(spl1-DCx-bias1*0.42);  spl1 = min(1.5-rando,spl1);
spl0 += DCy;
spl1 += DCy;
fb0 = abs(spl0+rando);  bias0 = left.svf_lowp(fb0,11,0.45);
fb1 = abs(spl1+rando);  bias1 = right.svf_lowp(fb1,11,0.45);
spl0 += DCz;
spl1 += DCz;


//dc filter and tube clip
spl0 = min(1.7-rando*0.03,spl0);
spl1 = min(1.7-rando*0.03,spl1);
otm1 = a*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
otm2 = a*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;

//output
spl0 *= last_out_gain;  spl1 *= last_out_gain;
spl0 = min(0.98-rando*0.02,max(-0.98+rando*0.02,spl0));
spl1 = min(0.98-rando*0.02,max(-0.98+rando*0.02,spl1));



last_in_gain += d_in_gain;
last_OD_gain += d_OD_gain;
last_gain += d_gain;
last_out_gain += d_out_gain;

@gfx 450 540 // request horizontal/vertical heights (0 means dont care)
  xy(0, 0);    gfx_blit(0, 1, 0, 0, 0, 450, 540); //background
  xy(65,420);  gfx_blit(1, 0.8, 0);  //text

  /******************************* GUI Control ***********************************/
ax = mouse_x;  ay = mouse_y;
  //load state change
  mouse_on() = m_on;
  mouse_off() = m_off;
  aaaa = mouse_cap;
  
  //define the button
  input.button_rect(90,90,90,90);
  //setup the drag
  input.y_drag(input.button,1,m_on,m_off);//left click drag
  //define what happens
  input.down ? in_gain_db=max(in_gain_db-=0.5,-15);
  input.up ? in_gain_db=min(in_gain_db+=0.5,15);

  //define the button
  overd.button_rect(270,90,90,90);
  //setup the drag
  overd.y_drag(overd.button,1,m_on,m_off);//left click drag
  //define what happens
  overd.down ? OD_gain_db=max(OD_gain_db-=0.5,0);
  overd.up ? OD_gain_db=min(OD_gain_db+=0.5,20);
  
  //define the button
  amp.button_rect(90,270,90,90);
  //setup the drag
  amp.y_drag(amp.button,1,m_on,m_off);//left click drag
  //define what happens
  amp.down ? gain_db=max(gain_db-=0.5,-15);
  amp.up ? gain_db=min(gain_db+=0.5,15);
  
  //define the button
  output.button_rect(270,270,90,90);
  //setup the drag
  output.y_drag(output.button,1,m_on,m_off);//left click drag
  //define what happens
  output.down ? out_gain_db=max(out_gain_db-=0.5,-20);
  output.up ? out_gain_db=min(out_gain_db+=0.5,20);
  
  
  xy( 90, 90);  knob1=floor(2.1*(in_gain_db+15));  gfx_blit(2, 1, 0, 0, 90*knob1, 90, 90);
  xy(270, 90);  knob2=floor(3.19*OD_gain_db);       gfx_blit(2, 1, 0, 0, 90*knob2, 90, 90);
  xy( 90,270);  knob3=floor(2.12*(gain_db+15));  gfx_blit(2, 1, 0, 0, 90*knob3, 90, 90);
  xy(270,270);  knob4=floor(1.59*(out_gain_db+20));  gfx_blit(2, 1, 0, 0, 90*knob4, 90, 90);

  //knob labels
  rgb(0.05, 0.05, 0.05);
  xy (106, 180);  gfx_drawstr(" Input");
  xy (280, 180);  gfx_drawstr("Overdrive");
  xy (86, 360);   gfx_drawstr("Tube Amp Gain");
  xy (280, 360);  gfx_drawstr(" Output");

  xy (0,0);
