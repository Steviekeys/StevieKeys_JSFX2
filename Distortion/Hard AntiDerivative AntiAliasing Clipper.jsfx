version:0.6.0beta
desc:Hard Anti-Derivative Anti-Aliasing Clipper
Author:Stephen Boyes
about:
  # Hard Anti-Derivative Anti-Aliasing Clipper
  Non oversampled clipper based on anti derivative anti aliasing methods
  as described in this paper (the math is a bit over my head lol)...
  https://dafx16.vutbr.cz/dafxpapers/20-DAFx-16_paper_41-PN.pdf
  controls...
  * Drive:   Level compensated clipping drive
  * High Restore:   Restores high frequencies lost by anti derivative method
  * Strict Clip:   Second clipping stage to catch peaks cuased by high restore
  * Out:   Output level
changelog:
  - First github version

slider1:gain_db=0<-6,25,0.02>Drive (dB)
slider3:high_restore=1<0,1,0.02>High Restore
slider4:limit=1<0,1,1{OFF,ON}>Strict Clip
slider6:out_gain_dB=0<-6,25,0.02>Out (dB)


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
last_gain=10^(gain_db/20);
out_last_gain=10^(out_gain_db/20);
foo = exp(-1/(20*0.001*srate));
pdc_bot_ch = 0;
pdc_top_ch = 2;
pdc_delay = 1;


function AAclipper_1(x0)
instance (f1n1,f1,x0,x1)
(
  abs(x0) > 1 ? (
    f1 = x0*sign(x0)-0.5;
  ):(
  f1 = 0.5*x0^2;  
  );
  abs(x0-x1) < 2^-18 ? (
    out = max(-1,min(1,(x0+x1)*0.5));
    ):(
    out = (f1-f1n1)/(x0-x1);
    );
  f1n1 = f1;
  x1 = x0;
out
);

function FIR(x0,z0,z1,z2)
instance(x0,x1,x2,z0,z1,z2)
(
  out = x0*z0 + x1*z1 + x2*z2;
  x2 = x1;
  x1 = x0;
  out
);


@slider
next_gain=10^(gain_db/20);
out_next_gain=10^(out_gain_db/20);
select = slider2;


@block
d_gain = (next_gain - last_gain)/samplesblock;
d_out_gain = (out_next_gain - out_last_gain)/samplesblock;


@sample
  spl0 *= last_gain;
  spl1 *= last_gain;
  
  cliplight = max(log10(spl0)*20,log10(spl1)*20);
  cliplight = max(0,cliplight);
  cliplight = smoothing = max(cliplight,0.999*smoothing);

  overL2dB = overL1dB;  overL1dB = overLdB;  overLdB = 10^(max(1,abs(spl0))/20);
  overR2dB = overR1dB;  overR1dB = overRdB;  overRdB = 10^(max(1,abs(spl1))/20);
  hf0 = lefthf.FIR(spl0,-0.25,0.5,-0.25);
  hf1 = righhf.FIR(spl1,-0.25,0.5,-0.25);
  cutLdB = max(overL1dB,max(foo*overLdB,foo*overL2dB));
  cutRdB = max(overR1dB,max(foo*overRdB,foo*overR2dB));
  cutL2dB = max(cutLdB,cutLdB + foo*(cutL2dB-cutLdB));
  cutR2dB = max(cutRdB,cutRdB + foo*(cutR2dB-cutRdB));
  cutL = log10(cutL2dB)*20;
  cutR = log10(cutR2dB)*20;
  hf0 = hf0 / cutL;
  hf1 = hf1 / cutR;  
  spl0 = leclip1.AAclipper_1(spl0);
  spl1 = riclip1.AAclipper_1(spl1);  
  spl0 = leftinput.FIR(spl0,0.5,0.5,0);
  spl1 = righinput.FIR(spl1,0.5,0.5,0);
  spl0 = 1*spl0 + hf0*high_restore;
  spl1 = 1*spl1 + hf1*high_restore;
  limit == 1 ? (
    spl0 = max(-1,min(1,spl0));
    spl1 = max(-1,min(1,spl1));
  );


  spl0 /= last_gain;
  spl1 /= last_gain;
  last_gain += d_gain;
  
  spl0 *= out_last_gain;
  spl1 *= out_last_gain;
  out_last_gain += d_out_gain;

@gfx 256 256


  gfxSize = min(gfx_w,gfx_h);


  gfx_r=0.0;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_x=gfx_y=0;
  gfx_rectto(gfx_w,gfx_h);

  gfx_r=cliplight*0.9;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/2,gfxSize/2,gfxSize/2,1);

  gfx_r=gfx_g=gfx_b=0.8; gfx_a=1;
  gfx_x=gfxSize/2; gfx_y=0;
  gfx_lineto(gfxSize/2,gfxSize,0);
  gfx_x=0; gfx_y=gfxSize/2;
  gfx_lineto(gfxSize,gfxSize/2,0);

  gfx_x = gfxSize-20; gfx_y = gfxSize/2;
  gfx_drawchar($'I');
  gfx_drawchar($'N');

  gfx_x = gfxSize/2+2; gfx_y = 0;
  gfx_drawchar($'O');
  gfx_drawchar($'U');
  gfx_drawchar($'T');

gfx_r=0;gfx_g=0.65;gfx_b=1;
gfx_x = 4; gfx_y = 4;  
gfx_drawstr("Non oversampled clipper");
gfx_x = 4; gfx_y = 16;
gfx_drawstr("based on anti derivative");
gfx_x = 4; gfx_y = 28;  
gfx_drawstr("anti aliasing methods");


gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+4;  
gfx_drawstr("controls...");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+28;
gfx_drawstr("Drive: Level compensated
clipping drive");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+60;
gfx_drawstr("High Restore: Restores high
frequencies near half sample rate
lost by anti derivative method");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+94;
gfx_drawstr("Strict Clip: Second clipping stage
to catch peaks cuased by
High Restore");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+126;
gfx_drawstr("Out: Output level");

  gfx_r=0.5;  gfx_g=1;  gfx_b=0;  gfx_a=1;
  gfx_x = 0;  gfx_y = 0.5*gfxSize + 0.5*gfxSize/last_gain;

  gfx_lineto(0.5*gfxSize - 0.5*gfxSize/last_gain,0.5*gfxSize + 0.5*gfxSize/last_gain); 
  gfx_lineto(0.5*gfxsize + 0.5*gfxSize/last_gain,0.5*gfxSize - 0.5*gfxSize/last_gain);
  gfx_lineto(gfxsize,0.5*gfxSize - 0.5*gfxSize/last_gain);

