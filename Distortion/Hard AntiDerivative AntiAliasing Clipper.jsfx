version:1.0.1
desc:Hard Anti-Derivative Anti-Aliasing Clipper
Author:Stephen Boyes
about:
  # Hard Anti-Derivative Anti-Aliasing Clipper
  Non oversampled clipper based on anti derivative anti aliasing methods
  as described in this paper (the math is a bit over my head lol)...
  https://dafx16.vutbr.cz/dafxpapers/20-DAFx-16_paper_41-PN.pdf
  controls...
  * Drive:   Level compensated clipping drive
  * High Restore:   Restores high frequencies lost by anti derivative method
  * Strict Clip:   Second clipping stage to catch peaks cuased by high restore
  * Out:   Output level
changelog:
  - CPU boost
  - now one of the best non oversampling hard clippers available

slider1:gain_db=0<-6,25,0.02>Drive (dB)
slider3:high_restore=1<0,1,0.02>High Restore
slider4:limit=1<0,1,1{OFF,ON}>Strict Clip
slider6:out_gain_dB=0<-6,25,0.02>Out (dB)


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
last_gain=10^(gain_db/20);
out_last_gain=10^(out_gain_db/20);
//foo = 0.5;
bar = exp(-1/(10*0.001*srate));
pdc_bot_ch = 0;
pdc_top_ch = 2;
pdc_delay = 1;

function AAclipper_2(x0)
instance (f1,f1n1,f1n2,f2,f2n1,f2n2,x0,x1,x2)
(
//calculate derivative functions
  abs(x0) >= 1 ? (
    f1 = x0*sign(x0)-0.5;
    f2 = ((x0*x0*0.5) - (1/6))*sign(x0);
  ):(
    f1 = 0.5*x0*x0;
    f2 = x0*x0*x0*(1/3);
  );
 
  abs(x0-x1) < 2^-18 ? (
    out = 0.5 * max(-1,min(1,(x0 + 2*x1)/3));
    ):(
    out = (x0*(f1-f1n1)-(f2-f2n1)) / ((x0-x1)*(x0-x1));
    );

  abs(x2-x1) < 2^-18 ? (
  out += 0.5 * max(-1,min(1,(x2 + 2*x1)/3));
  ):(
  out += (x2*(f1n2-f1n1)-(f2n2-f2n1)) / ((x2-x1)*(x2-x1));
  );

  f1n2 = f1n1;
  f1n1 = f1;
  f2n2 = f2n1;
  f2n1 = f2;
  x2 = x1;
  x1 = x0;
out
);


function FIR(x0,z0,z1,z2)
instance(x0,x1,x2,z0,z1,z2)
(
  out = x0*z0 + x1*z1 + x2*z2;
  x2 = x1;
  x1 = x0;
  out
);


@slider
next_gain=10^(gain_db/20);
out_next_gain=10^(out_gain_db/20);
select = slider2;


@block
d_gain = (next_gain - last_gain)/samplesblock;
d_out_gain = (out_next_gain - out_last_gain)/samplesblock;


@sample
  spl0 *= last_gain;
  spl1 *= last_gain;
  
  LED_L = log10(abs(spl0))*20;
  LED_R = log10(abs(spl1))*20;
  LED_Ln5 += max(-5,LED_L)+5;
  LED_Rn5 += max(-5,LED_R)+5;
  LED_Ln3 += max(-3,LED_L)+3;
  LED_Rn3 += max(-3,LED_L)+3;
  LED_Ln1 += max(-1,LED_L)+1;
  LED_Rn1 += max(-1,LED_R)+1;
  LED_L0 += max(0,LED_L);
  LED_R0 += max(0,LED_R);
  LED_L1 += max(1,LED_L)-1;
  LED_R1 += max(1,LED_R)-1;
  LED_L2 += max(2,LED_L)-2;
  LED_R2 += max(2,LED_R)-2;
  LED_L3 += max(3,LED_L)-3;
  LED_R3 += max(3,LED_R)-3;
  LED_L4 += max(4,LED_L)-4;
  LED_R4 += max(4,LED_R)-4;



  overL2dB = overL1dB;  overL1dB = overLdB;  overLdB = 10^(max(1,abs(spl0))/20);
  overR2dB = overR1dB;  overR1dB = overRdB;  overRdB = 10^(max(1,abs(spl1))/20);
  hf0 = lefthf.FIR(spl0,-0.16666667,0.333333333,-0.16666667);
  hf1 = righhf.FIR(spl1,-0.16666667,0.333333333,-0.16666667);
  cutLdB = max(overL1dB,0.1665*overLdB+0.667*overL1dB+0.1665*overL2dB);
  cutRdB = max(overR1dB,0.1665*overRdB+0.667*overR1dB+0.1665*overR2dB);
  cutL2dB = max(cutLdB,cutLdB + bar*(cutL2dB-cutLdB));
  cutR2dB = max(cutRdB,cutRdB + bar*(cutR2dB-cutRdB));
  cutL = log10(cutL2dB)*20;
  cutR = log10(cutR2dB)*20;
  hf0 = hf0 / cutL;
  hf1 = hf1 / cutR;  
  spl0 = leclip2.AAclipper_2(spl0);
  spl1 = riclip2.AAclipper_2(spl1);
  spl0 = 1*spl0 + hf0*high_restore;
  spl1 = 1*spl1 + hf1*high_restore;
  limit == 1 ? (
    spl0 = max(-1,min(1,spl0));
    spl1 = max(-1,min(1,spl1));
  );


  spl0 /= last_gain;
  spl1 /= last_gain;
  last_gain += d_gain;
  
  spl0 *= out_last_gain;
  spl1 *= out_last_gain;
  out_last_gain += d_out_gain;

@gfx 460 340


  gfxSize = min(gfx_w,gfx_h);


  gfx_r=0.0;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_x=gfx_y=0;
  gfx_rectto(gfx_w,gfx_h);

  //meter
  gfx_r=0.0;  gfx_g=LED_Ln5;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.05),gfxSize/4.7,gfxSize/45,1);
  gfx_r=0.0;  gfx_g=LED_Rn5;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.05),gfxSize/3.7,gfxSize/45,1);
  gfx_r=0.0;  gfx_g=LED_Ln3;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.1),gfxSize/4.7,gfxSize/45,1);
  gfx_r=0.0;  gfx_g=LED_Rn3;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.1),gfxSize/3.7,gfxSize/45,1);
  gfx_r=LED_Ln1;  gfx_g=LED_Ln1;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.15),gfxSize/4.7,gfxSize/45,1);
  gfx_r=LED_Rn1;  gfx_g=LED_Rn1;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.15),gfxSize/3.7,gfxSize/45,1);
  gfx_r=LED_L0;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.2),gfxSize/4.7,gfxSize/45,1);
  gfx_r=LED_R0;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.2),gfxSize/3.7,gfxSize/45,1);
  gfx_r=LED_L1;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.25),gfxSize/4.7,gfxSize/45,1);
  gfx_r=LED_R1;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.25),gfxSize/3.7,gfxSize/45,1);
  gfx_r=LED_L2;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.3),gfxSize/4.7,gfxSize/45,1);
  gfx_r=LED_R2;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.3),gfxSize/3.7,gfxSize/45,1);
  gfx_r=LED_L3;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.35),gfxSize/4.7,gfxSize/45,1);
  gfx_r=LED_R3;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.35),gfxSize/3.7,gfxSize/45,1);
  gfx_r=LED_L4;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.4),gfxSize/4.7,gfxSize/45,1);
  gfx_r=LED_R4;  gfx_g=0.0;  gfx_b=0.0; gfx_a=1;
  gfx_circle(gfxSize/(1/0.4),gfxSize/3.7,gfxSize/45,1);

  LED_Ln5*=0.25; LED_Ln3*=0.25; LED_Ln1*=0.25; LED_L0*=0.25;
  LED_L1*=0.25;  LED_L2*=0.25;  LED_L3*=0.25;  LED_L4*=0.25;
  LED_Rn5*=0.25; LED_Rn3*=0.25; LED_Rn1*=0.25; LED_R0*=0.25;
  LED_R1*=0.25;  LED_R2*=0.25;  LED_R3*=0.25;  LED_R4*=0.25;
  
  
  
  

  gfx_r=gfx_g=gfx_b=0.8; gfx_a=1;
  gfx_x=gfxSize/2; gfx_y=0;
  gfx_lineto(gfxSize/2,gfxSize,0);
  gfx_x=0; gfx_y=gfxSize/2;
  gfx_lineto(gfxSize,gfxSize/2,0);

  gfx_x = gfxSize-20; gfx_y = gfxSize/2;
  gfx_drawchar($'I');
  gfx_drawchar($'N');

  gfx_x = gfxSize/2+2; gfx_y = 0;
  gfx_drawchar($'O');
  gfx_drawchar($'U');
  gfx_drawchar($'T');

gfx_r=0;gfx_g=0.65;gfx_b=1;
gfx_x = 4; gfx_y = 8;  
gfx_drawstr("Non oversampled clipper");
gfx_x = 4; gfx_y = 20;
gfx_drawstr("based on anti derivative");
gfx_x = 4; gfx_y = 32;  
gfx_drawstr("anti aliasing methods");


gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+4;  
gfx_drawstr("controls...");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+28;
gfx_drawstr("Drive: Level compensated
clipping drive");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+60;
gfx_drawstr("High Restore: Restores high
frequencies near half sample rate
lost by anti derivative method");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+94;
gfx_drawstr("Strict Clip: Second clipping stage
to catch peaks cuased by
High Restore");
gfx_x = gfxSize/2+4; gfx_y = gfxSize/2+126;
gfx_drawstr("Out: Output level");

  gfx_r=0.5;  gfx_g=1;  gfx_b=0;  gfx_a=1;
  gfx_x = 0;  gfx_y = 0.5*gfxSize + 0.5*gfxSize/last_gain;

  gfx_lineto(0.5*gfxSize - 0.5*gfxSize/last_gain,0.5*gfxSize + 0.5*gfxSize/last_gain); 
  gfx_lineto(0.5*gfxsize + 0.5*gfxSize/last_gain,0.5*gfxSize - 0.5*gfxSize/last_gain);
  gfx_lineto(gfxsize,0.5*gfxSize - 0.5*gfxSize/last_gain);
