version:0.5.1beta
desc:Blue Vocal Compressor (beta)
author:Stephen Boyes
about:
  # Blue Vocal Compressor (beta)
    Smooth clean Opto compressor/limiter with ratio, attack, release controls
    and featuring colourfull output stage
    Controls...
    input gain          : input gainstaging
    less ess            : feed high frquency transients to the detector to prevent ess sounds getting louder
    Compression Drive   : Increases compression, output compensated
    Output Drive        : Push the output stage harder for more dirt and colour
    Compress - Limit    : Compress = feedback 2:1  Limit = Feedforward inf:1
    Attack time         : Aprox time for full gain reduction
    Release Time        : Aprox time for gain reduction to return to 0dB after level drops
    exact release time is dependant on amount of gain reduction and length of time in compression
changelog:
  - tidy code
provides:Blue_Vocal_Compressor/*




/*******************************************************************************
*  2024    Stephen Boyes                                                       *
*  This program is free software                                               *
*                                                                              *
*                                                                              *
*  This program is distributed in the hope that it will be useful,             *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of              *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                        *
*                                                                              *
*******************************************************************************/



slider1:gain_db=0<-12,12,0.2>input gain (dB)
slider2:Drv=0<0,40>Compression Drive
slider3:out_gain=0<-10,30,0.1>Output Drive (dB)

slider10:ratio=0.5<0,1,0.01>Compress - Limit (ratio)
slider11:attime=10<1,100,0.2:log=10>Attack Time (ms)
slider12:reltime=500<50,5000,0.1:log=500>Release Time (ms)

slider14:con_gain_db=0<0,20,0.2>less ess

slider16:trim=0<-10,10,0.1>Out Trim


import Blue_Vocal_Compressor/st-oversampler.jsfx-inc
import /GUI_version_1.jsfx-inc


filename:0,Blue_Vocal_Compressor/Vintage_PPM_meter.png
filename:1,Blue_Vocal_Compressor/ChiControl.png


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output


options:gfx_Hz=60



@init
last_gain=10^(gain_db/20);
last_con_gain=10^(con_gain_db/20)-1;
last_out_gain=10^(out_gain/20);


ext_tail_size = -1;
pdc_bot_ch=0;
pdc_top_ch=2;
pdc_delay=6;  
gr_meter=1;
gr_meter_attack = exp(-1/(50*0.001*srate));
gr_meter_decay = exp(1/(1*srate));

//ess detect
freq=4750;
que=0.75;

rms_sec = 0.3 * 0.001;
rms_Freq = 1/(2*$pi*rms_sec);
rms_coef = (rms_Freq/srate)/(1+(rms_Freq/srate));
rms_coef = 1-rms_coef;

a_time = 0.3;
att_sec = a_time * 0.001;
att_Freq = 1/(2*$pi*att_sec);
att_coef = (att_Freq/srate)/(1+(att_Freq/srate));
att_coef = 1-att_coef;

r_time = 3;
rel_sec = r_time * 0.001;
rel_Freq = 1/(2*$pi*rel_sec);
rel_coef = (rel_Freq/srate)/(1+(rel_Freq/srate));
rel_coef = 1-rel_coef;


//limit smash @init
Fc1 = 90;
f1 = 2*sin($pi*fc1/(srate));
Fc2 = 25;
f2 = 2*sin($pi*fc2/(srate));
b = exp(-1/(50*0.001*0.001*srate));
fbRMS = exp(-1/(0.001*10*srate));


//tube amp coef
srate < 50000 ? osrate = srate*4;
srate > 50000 ? osrate = srate*2;
srate > 100000 ? osrate = srate;
lowpass6dB = 38000;
Fcr = lowpass6dB/(osrate);
r = exp(-2*$pi*Fcr);
s = 1-r;
s *= (1/3);


//transformer low pass coef
FcL2 = 4/srate;
c = exp(-2*$pi*FcL2);
//tanh hysterisis low pass coef
Fca = 12/srate;
a = exp(-2*$pi*Fca);

function svf_highp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 1;
 m1 = -k;
 m2 = -1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);

function svf_lowp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 0;
 m2 = 1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);

rel_ms = 150;
rel = -1/(srate*0.001*rel_ms);
att_ms = 1.5;
att = 1/(srate*0.001*att_ms);


function slew_release(in0)
instance(in0,x,diff,out,out1)
(
x = in0-out1;  //difference from last sample
diff = min(max(x,rel),att);
out = max(min(out1+diff,1),0);
out1 = out;
out
);

function highpass(x,c)
instance(x,y,c)
(
  y = x + (y-x)*c;
  x - y
);

function highpass2(x,c)
instance(x,x0,x1,y,c)
(
  x1 = x0;
  x0 = x;
  x = 0.50*x + 0.50*x1;
  y = x + (y-x)*c;
  x0 - y
);

function lowpass(in,b)
instance(in,b,y)
(
  y += b*(in-y);
  y
);


function lowpass2(x,c)
instance(x,x0,x1,c,y)
(
  x1 = x0;
  x0 = x;
  x = 0.5*x + 0.5*x1;
  y = x + (y-x)*c;
  y
);


function tube(in)
instance(out,last_out,in)
(
out = in + r*last_out*(1-last_out);
out > 0.75 ? (
  out = (0.5/(1+exp(-8*(out-0.75)))) + 0.5;
):(
  out < -0.75 ? (
    out = (-0.5/(1+exp(8*(out+0.75)))) - 0.5;
  ):(
    out = out;
  );
);
last_out = out;
out
);


function transformer(HP,LP)
instance(foo,bar,HP,LP)
(
LP == 0 ? (
  LP = 0.00000001;
);
foo = HP*LP;
bar = foo * (1/sqrt(1+foo*foo));
(bar/LP) * (1/sqrt(1+(bar/LP)*(bar/LP)));
);


function RMS(in,c)
instance (in,c,y)
(
  in = 0.0001+in*in;
  y = in+c*(y-in);
  sqrt(y)-(0.0001)
);

function sta_var_LPfilter(in,f,q)  // fc = 90;  q = 1/0.62;  f = 2*sin($pi*fc/(srate));
instance (hp,in,lp,dly1,dly2)  //old style sfv code
(
  hp = in-lp-dly1*q;
  lp = (hp*f)+dly1;
  dly1 = lp;
  lp = lp*f+dly2;
  dly2 = lp;
  lp;  //final output low pass
);
 

function attackfilter(x,atcoef)
instance(x,y,atcoef)
(
  y = x + (y-x)*atcoef;
  y
);


function tanh(x)
(
  -2/(1+exp(-2*x)) + 1
);


@slider



@block
next_gain = 10^(gain_db/20);
next_con_gain = 10^(con_gain_db/20)-1;
next_out_gain = 10^(out_gain/20);

//limit smash @slider
inboost = 10^(Drv/20);  //drive
outcut  = 2^(-Drv/7.7);   // Auto Gain out
Feedback    = 1-ratio;
Feedforward = ratio;
atcoef   = exp(-1/(attime * 0.001 * srate));
Rspeedin = exp(-1/(reltime * 0.001 * srate));
outtrim = 10^(trim/20);




d_gain = (next_gain - last_gain)/samplesblock;
d_con_gain = (next_con_gain - last_con_gain)/samplesblock;
d_out_gain = (next_out_gain - last_out_gain)/samplesblock;

@sample

////////input gain////////
spl0 *= last_gain;
spl1 *= last_gain;
last_gain += d_gain;



//limit smash @sample
alog = 0.001*(0.5-rand(1)); // noise
alog = noise.sta_var_LPfilter(alog,f1,1);
alog2= 0.00125*(rand(2)-1);

Rspeed = Rspeedin;
peak < 0.7071 ? Rspeed = Rspeedin*Rspeedin;
peak < 0.5    ? Rspeed = (Rspeedin*Rspeedin)*(Rspeedin*Rspeedin);
peak < 0.354  ? Rspeed = (Rspeedin*Rspeedin)*(Rspeedin*Rspeedin)*(Rspeedin*Rspeedin);
peak < 0.25   ? Rspeed = (Rspeedin*Rspeedin)*(Rspeedin*Rspeedin)*(Rspeedin*Rspeedin)*(Rspeedin*Rspeedin);



OptoTime = 0.6;
LA = exp(-1/(OptoTime*srate));
OPTO = peak + (OPTO-peak)*LA;
//Rspeed = PD.RMS(Rspeed,c);
Rspeed = Rspeed^OPTO; 

spl0 = spl0*inboost;
spl1 = spl1*inboost;

//feedforward (limiting) attack
FF0 = sqrt(FFleft.sta_var_LPfilter(spl0*spl0,f2,2.618));
FF1 = sqrt(FFright.sta_var_LPfilter(spl1*spl1,f2,2.618));
FFtotal = (FF0+FF1)*0.5+con2;
input = (FBtotal*Feedback + FFtotal*Feedforward + alog);

//controls the compressor knee
peak  = (log((exp(8-8*input)+1)*(exp(8+8*input)+1))/8)-2;


//release
oldpeak = max(oldpeak*Rspeed,0);

//pick attack or release value
fuzz = 1/(1+exp(-1800*(peak/oldpeak-1)));
peak = peak*fuzz + oldpeak*(1-fuzz);


//store last value
oldpeak = peak;
peak = 1/(peak+1);  //gain needed to limit the signal to 1 (invert)

//attack time
peak = attack.attackfilter(peak,atcoef);

//gain reduction
spl0 = spl0*peak;
spl1 = spl1*peak;


////////detect HF level////////
side_chain = 0.5*(spl0+spl1);
ESchain = sss.svf_highp(side_chain,freq,que);
ESlevel = sqrt(ess.svf_lowp(0.000000001+ESchain*ESchain,520,0.5));

////////detect average level////////
DThresh = (0.00001+side_chain*side_chain);  //min threshold -50dB
DThresh = t.svf_lowp(DThresh,510,0.5);  //dynamic threshold
DThresh = sqrt(DThresh);

////////calculate is sound consonant or vowel////////
consonant = 1/(1 + exp(-12*((ESlevel/DThresh)-1)));
consonant = con.lowpass(consonant,b);
consonant = slew.slew_release(consonant);

////////split signal////////
con2 = 0.5*consonant*spl0+0.5*consonant*spl1;
con2 *= last_con_gain;
last_con_gain += d_con_gain;


FBtotal = feedback.RMS((0.5*(spl0+spl1)+con2+alog2),fbRMS); //feedback for comp


spl0 = spl0*last_out_gain*(outcut);
spl1 = spl1*last_out_gain*(outcut);


////output stage////
//tube
in0 = s*spl0*0.3;
in1 = s*spl1*0.3;

srate > 100000 ?
(
  spl0 = L.tube(in0);
  spl1 = R.tube(in1);
):(
  srate > 50000 ?
  (
  osL.os_up2(in0);
  osR.os_up2(in1);

    osL.y1 = L.tube(osL.y1);
    osL.y0 = L.tube(osL.y0);
    osR.y1 = R.tube(osR.y1);
    osR.y0 = R.tube(osR.y0);

  spl0 = osL.os_down2minphase();
  spl1 = osR.os_down2minphase();
  ):(
  osL.os_up4(in0);
  osR.os_up4(in1);

    osL.y3 = L.tube(osL.y3);
    osL.y2 = L.tube(osL.y2);
    osL.y1 = L.tube(osL.y1);
    osL.y0 = L.tube(osL.y0);
    osR.y3 = R.tube(osR.y3);
    osR.y2 = R.tube(osR.y2);
    osR.y1 = R.tube(osR.y1);
    osR.y0 = R.tube(osR.y0);

  spl0 = osL.os_down4minphase();
  spl1 = osR.os_down4minphase();
  );
);

//transformer
spl0 *= 4;
spl1 *= 4;

LP0 = LPleft.lowpass2(spl0,c);
LP1 = LPrigh.lowpass2(spl1,c);

HP0 = spl0-LP0;
HP1 = spl1-LP1;

LP0 -= 0.004;
LP1 -= 0.004;

spl0 = LT.transformer(HP0,LP0);
spl1 = RT.transformer(HP1,LP1);

spl0 = DCleft1.highpass2(spl0,c);
spl1 = DCrigh1.highpass2(spl1,c);

//hysterisis tanh

Tanh0 = tanh(2*spl0 - 0.45*Hyst0);
Tanh1 = tanh(2*spl1 - 0.45*Hyst1);

Hyst0 = Tanh0 - spl0;
Hyst1 = Tanh1 - spl1;

Hyst0 = HL.lowpass2(Hyst0,a);
Hyst1 = HR.lowpass2(Hyst1,a);

spl0 = Tanh0;
spl1 = Tanh1;

//DC filter
spl0 = DCleft2.highpass2(-1.25*spl0,c);
spl1 = DCrigh2.highpass2(-1.25*spl1,c);



spl0 /= last_out_gain;
spl1 /= last_out_gain;
last_out_gain += d_out_gain;
spl0 *= outtrim;
spl1 *= outtrim;


gr_meter = peak + (gr_meter-peak)*gr_meter_attack;




@gfx 1200 500 // request horizontal/vertical heights (0 means dont care)

  size = min(gfx_w/1200,gfx_h/500);

  gfx_r=0.3; gfx_G=0.6; gfx_b=0.9; gfx_rect(0,0,1200*size,500*size);

  gfx_x=800*size; gfx_y=32*size;
  GRdB = -20*log10(gr_meter);
  GRdB = max(0,min(GRdB,20));
  GRDisplay = floor(GRdB*4)*256;
  gfx_blit(0,1*size,0,0,GRdisplay,256,256);


  gfx_r=gfx_g=gfx_b=0.85;



   /******************************* GUI Control ***********************************/
  //load state change
  gfx_getchar();
  mouse_on() = m_on;
  mouse_off() = m_off;

  //text
  xy(92*size, 212*size);   gfx_drawstr("   input");
  xy(322*size, 212*size);  gfx_drawstr("Compression Drive");
  xy(564*size, 212*size);  gfx_drawstr("Output Drive");
  xy(92*size, 450*size);   gfx_drawstr("   Ratio");
  xy(322*size, 450*size);  gfx_drawstr(" Attack Time");
  xy(564*size, 450*size);  gfx_drawstr("Release Time");
  xy(812*size, 450*size);  gfx_drawstr(" Less Ess");
  xy(1054*size, 450*size); gfx_drawstr(" Out Trim");

  //numerical readout
  rgb(0.99, 0.95, 0.95);
  xy (110*size, 50*size);  gfx_drawnumber(gain_dB,1); gfx_drawstr(" dB");
  xy (350*size, 50*size);  gfx_drawnumber(Drv,1);     gfx_drawstr(" dB");
 
  xy (350*size, 320*size); gfx_drawnumber(Attime,1);  gfx_drawstr(" ms");
  xy (585*size, 320*size); gfx_drawnumber(Reltime,1); gfx_drawstr(" ms");
  xy (1070*size,320*size); gfx_drawnumber(trim,2);    gfx_drawstr(" dB");
  
  xy (60*size, 430*size);  gfx_drawstr("2:1");
  xy (170*size,430*size); gfx_drawstr("inf:1");

  //input
  in.button_rect(64*size,64*size,256*size,256*size); //define the button
  //setup the drag
  in.y_drag(in.button,1,m_on,m_off);//left click drag
  //define what happens
  in.down ? gain_db=max(gain_db-=0.3,-12);
  in.up ? gain_db=min(gain_db+=0.3,12);

  //compression
  comp.button_rect(304*size,64*size,256*size,256*size); //define the button
  //setup the drag
  comp.y_drag(comp.button,1,m_on,m_off);//left click drag
  //define what happens
  comp.down ? drv=max(drv-=0.5,0);
  comp.up ? drv=min(drv+=0.5,40);

  //output drive
  out_drive.button_rect(544*size,64*size,256*size,256*size);  //define the button
  //setup the drag
  out_drive.y_drag(out_drive.button,1,m_on,m_off);//left click drag
  //define what happens
  out_drive.down ? out_gain=max(out_gain-=0.5,-10);
  out_drive.up ? out_gain=min(out_gain+=0.5,30);  

  //ratio
  ratio_set.button_rect(64*size,320*size,256*size,256*size); //define the button
  //setup the drag
  ratio_set.y_drag(ratio_set.button,1,m_on,m_off);//left click drag
  //define what happens
  ratio_set.down ? ratio=max(ratio-=0.0125,0);
  ratio_set.up ? ratio=min(ratio+=0.0125,1);  

  //attack
  attack_set.button_rect(304*size,320*size,256*size,256*size); //define the button
  //setup the drag
  attack_set.y_drag(attack_set.button,1,m_on,m_off);//left click drag
  //define what happens
  attack_set.down ? attime=max(attime*=(1/1.04),1);
  attack_set.up ? attime=min(attime*=1.04,100);  

  //release
  release_set.button_rect(544*size,320*size,256*size,256*size); //define the button
  //setup the drag
  release_set.y_drag(release_set.button,1,m_on,m_off);//left click drag
  //define what happens
  release_set.down ? reltime=max(reltime*=(1/1.04),50);
  release_set.up ? reltime=min(reltime*=1.04,5000);  

  //less ess
  ess_set.button_rect(784*size,320*size,256*size,256*size); //define the button
  //setup the drag
  ess_set.y_drag(ess_set.button,1,m_on,m_off);//left click drag
  //define what happens
  ess_set.down ? con_gain_db=max(con_gain_db-=0.25,0);
  ess_set.up ? con_gain_db=min(con_gain_db+=0.25,20);

  //out trim
  out_set.button_rect(1024*size,320*size,256*size,256*size); //define the button
  //setup the drag
  out_set.y_drag(out_set.button,1,m_on,m_off);//left click drag
  //define what happens
  out_set.down ? trim=max(trim-=0.25,-10);
  out_set.up ? trim=min(trim+=0.25,10);


  xy(64*size,64*size);    gfx_blit(1,0.5*size,0,0,floor((47/24)*(gain_db+12))*256,256,256); //input
  xy(304*size,64*size);   gfx_blit(1,0.5*size,0,0,floor((47/40)*drv)*256,256,256); //compression drive
  xy(544*size,64*size);   gfx_blit(1,0.5*size,0,0,floor((47/40)*(out_gain+10))*256,256,256); //output drive
  xy(64*size,320*size);   gfx_blit(1,0.5*size,0,0,floor(ratio*47)*256,256,256); //ratio
  xy(304*size,320*size);  gfx_blit(1,0.5*size,0,0,floor(47*((attime-1)/99)^0.29)*256,256,256); //attack time
  xy(544*size,320*size);  gfx_blit(1,0.5*size,0,0,floor(47*((reltime-50)/4950)^0.29)*256,256,256); //release time
  xy(784*size,320*size);  gfx_blit(1,0.5*size,0,0,floor((47/20)*con_gain_db)*256,256,256); //less ess
  xy(1024*size,320*size); gfx_blit(1,0.5*size,0,0,floor((47/20)*(trim+10))*256,256,256); //out trim
