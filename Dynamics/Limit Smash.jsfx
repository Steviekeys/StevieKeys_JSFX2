version:3.3.0
desc:Limit smash [v3]
author:Stephen Boyes
about:
  # Limit Smash
    Analogue style limiter with feedforward and feedback detectors
    Controls...
    Drive Amount        : Increases compression
    Output Gain         : Control the overall level
    Analogue - Digital  : Analogue=feedback  Digital=feddforward
    Release Time        : Time for gain reduction to return to 0dB after level drops
changelog:
  - Adjust RMS for feedback
  - Clean redundant code



/*******************************************************************************
*  2023    Stephen Boyes                                                       *
*  This program is free software                                               *
*                                                                              *
*                                                                              *
*                                                                              *
*  This program is distributed in the hope that it will be useful,             *
*  but WITHOUT ANY WARRANTY; without even the implied warranty of              *
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                        *
*                                                                              *
*******************************************************************************/


slider1:0<0,34>Drive Amount
slider2:0<-8,8,0.1>Output Gain (dB)
slider3:0.5<0,1,0.01>Analogue - Digital


slider8:=400<50,1000,0.1:log!=400>Release Time (ms)
-slider10:0<0,5000>actual release constant

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size = -1; //automatic silence detection
rate = srate/2.1;
Fc1 = 90;
f1 = 2*sin($pi*fc1/(srate));
Fc2 = 25;
f2 = 2*sin($pi*fc2/(srate));
Fc3 = 10.15/srate;
c = 1-exp(-2*$pi*Fc3);
Fc4 = 1489.93/srate;
f4 = 1-exp(-2*$pi*Fc4);
Fc5 = 10.00/srate;
fbRMS = 1-exp(-2*$pi*Fc5);



gr_meter=1;
gr_meter_decay = exp(1/(1*srate));

function RMS(in,c)
instance (in,c,y)
  (
  in = 0.00005+in^2;  y += c*(in-y);
  sqrt(y)-(0.00005)
  );

function sta_var_LPfilter(in,f,q)  // fc = 90;  q = 1/0.62;  f = 2*sin($pi*fc/(srate));
instance (hp,in,lp,dly1,dly2)
  (
  hp = in-lp-dly1*q;
  lp = (hp*f)+dly1;
  dly1 = lp;
  lp = lp*f+dly2;
  dly2 = lp;
  lp;  //final output low pass
  );


@slider
a = exp(-2*$pi*4500/(srate*0.5));
b = 1-a;


inboost = exp(slider1/8.68588963807);
outcut = 2^(-slider1/7.7);   // Auto Gain out
Gain = exp(slider2/8.68588963807);
Feedback = 1-slider3;
Feedforward = slider3;

Rspeedin = exp(-1/(slider8 * 0.001 * srate));


@block
slider10 = Rspeed;



@sample
alog = 0.001*(0.5-rand(1)); // noise
alog = noise.sta_var_LPfilter(alog,f1,1);

tpeak < 0.55 ? Rspeed = Rspeedin^5 : Rspeed = Rspeedin;
Rspeed = PD.RMS(Rspeed,c);



spl0 = spl0*inboost;

FF0 = sqrt(FFleft.sta_var_LPfilter(spl0^2,f2,2.618)); //FF atack
input0 = (FB0*Feedback + FF0*Feedforward + alog);
//k = 8; //controls the knee
peak0  = (log((exp(8-8*input0)+1)*(exp(8+8*input0)+1))/8)-2;

oldpeak0 = oldpeak0*Rspeed; // release
oldpeak0 = max(0,oldpeak0);
peak0 = max(peak0,oldpeak0);
oldpeak0 = peak0; //store last value
peak0 = 1/(peak0+1);  //(invert) gain needed to limit the signal to 1





spl1 = spl1*inboost;

FF1 = sqrt(FFright.sta_var_LPfilter(spl1^2,f2,2.618)); //FF atack
input1 = (FB1*Feedback + FF1*Feedforward + alog);
//k = 8; //controls the knee
peak1  = (log((exp(8-8*input1)+1)*(exp(8+8*input1)+1))/8)-2;



oldpeak1 = oldpeak1*Rspeed;
oldpeak1 = max(0,oldpeak1);
peak1 = max(peak1,oldpeak1);
oldpeak1 = peak1; //store last value
peak1 = 1/(peak1+1);   //gain needed to limit the signal to 1 (invert)




Tpeak = min(peak0,peak1);  //stereo GR link
Tpeak0 = (Tpeak+Peak0)/2;  //un-link a bit!
Tpeak1 = (Tpeak+peak1)/2;  


spl0 = spl0*Tpeak0;  //gain reduction
FB0 = left.RMS(spl0^2,fbRMS); //feedback for comp


spl1 = spl1*Tpeak1;   //gain reduction
FB1 = right.RMS(spl1^2,fbRMS); //feedback for comp



spl0 = spl0*Gain*(outcut);
spl1 = spl1*Gain*(outcut);

Tpeak = max(0.02,Tpeak);
Tpeak < gr_meter ? gr_meter=Tpeak : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );

@gfx 0 32 // request horizontal/vertical heights (0 means dont care)

  gr_meter *= exp(1/30); gr_meter>1?gr_meter=1; // decay meter here so if the audio processing stops it doesnt "stick"
  gfx_r=1; gfx_g=gfx_b=0; gfx_a=0.8;
  
  meter_bot=20;
  meter_h=min(gfx_h,32);
  xscale=gfx_w*20/meter_bot;

  gfx_y=0;
  gfx_x=gfx_w + log10(gr_meter)*xscale;
  gfx_rectto(gfx_w,meter_h);

  gfx_r=gfx_g=gfx_b=1.0; gfx_a=0.6;

  s2=sqrt(2)/2;
  g = s2;
  while(
    gfx_x=gfx_w + log10(g)*xscale;
    gfx_x >= 0 ? 
    (
      gfx_y=0;
      gfx_lineto(gfx_x,meter_h,0);
      gfx_y=meter_h-gfx_texth;
      gfx_x+=2;
      gfx_drawnumber(log10(g)*20,0);
      gfx_drawchar($'d');
      gfx_drawchar($'B');
    );
    g*=s2;
    gfx_x >=0;
  );
  gfx_a=1;

  gfx_x=0; gfx_y=meter_h/2 - gfx_texth/2;
  gfx_drawnumber(log10(gr_meter)*20,1);
  gfx_drawchar($'d');
  gfx_drawchar($'B');
