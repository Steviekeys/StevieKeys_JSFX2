version:0.5.5beta
desc:HQ Track Compressor (beta)
author:Stephen Boyes
provides:
  HQ_Track_Compressor/*
about:
  # HQ Track Compressor
  A normal compressor! featuring a subtle input stage
  and compression that behaves well even with fast attack and no oversampling.
  Featuring Anti-Derivative Anti-Aliaising sidechain elements, this is well suited to
  to the rectifing and hard knee compression components.
Changelog:
  - log scaling sliders
  - GUI markings


options:gfx_hz=60


slider1:drive=0<0,31,1>Input Saturation
slider2:thresh_db=0<-50,10,1>Threshold (dB)
slider3:ratio_in=3<1.2,12,0.2>Ratio
slider4:Att_in=5<0.04,30,0.02:sqr!=2.5>Attack (ms)
slider5:Rel_in=260<40,1000,1:sqr!=3>Release (ms)

slider10:gain_db=0<-9,22,1>gain (dB)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

filename:0,HQ_Track_Compressor/HQcomp_back.png
filename:1,HQ_Track_Compressor/Vintage_PPM_meter.png
filename:2,HQ_Track_Compressor/simple_red.png
filename:3,HQ_Track_Compressor/simple_silver.png
filename:4,HQ_Track_Compressor/simple_blue.png
filename:5,HQ_Track_Compressor/HQcomp_text.png


@init
  last_thresh = 10^(thresh_db/20);
  last_gain = 10^(gain_db/20);
  gr_meter = 1;
  gr_meter_decay = exp(1/(0.02*srate));
  gr_smooth   = exp(-1/(0.001*3*srate));
  r1 = 0.11*(rand(2)-1);
  r2 = 0.11*(rand(2)-1);
  r3 = 0.12*(rand(2)-1);
  r4 = 0.12*(rand(2)-1);
  ext_gr_meter = 0;
  pdc_delay = 2;
  pdc_bot_ch = 0;
  pdc_top_ch = 2;

  satenv = 2.25;
  enva = exp(-1/(0.001*satenv*srate));
  envb = 1-enva;

function gainshaper_detector (X)
(
(0.667+exp(-0.5*X^2))*0.64
);

function gainshaper_smoother (X)
instance (out)
(
out = envb*X + enva*out;
out
);

function AA_abs_square(x0)
instance (f0,f0n1,x0,x1)
(
  abs(x0-x1) < 2^-19 ? (
    x0 >= 0 ? f0 = 0.5*x0^2;
    x0 <= 0 ? f0 = -0.5*x0^2;
    out = abs(x0+x1)*0.5;
    ):(
    x0 >= 0 ? f0 = 0.5*x0^2;
    x0 <= 0 ? f0 = -0.5*x0^2;
    out = (f0-f0n1)/(x0-x1);
  );
  x1 = x0;
  f0n1 = f0;
  out
);

function AA_sidechain_dB(x0)
instance (f0,f0n1,x0,x1)
(
  abs(x0-x1) <= 2^-19 ? (
    f0 = 20*(log10(x0)*x0 - (1/log(10))*x0);
    out = -120.4;
    ):(
    f0 = 20*(log10(x0)*x0 - (1/log(10))*x0);
    out = (f0-f0n1)/(x0-x1);
  );
  x1 = x0;
  f0n1 = f0;
  out
);

function sidechain_thresh(x0,knee)
instance (f0,f0n1,x0,x1,knee,in)
(
    in = x0*0.5 + x1*0.5;
    out =   (in/(1+knee^in))-in;
    out += -1/(1+0.25*x0^2);
  x1 = x0;
  out
);

function sidechain_gain(x0)
instance (f0,f0n1,x0,x1)
(
  out = 10^((x0+x1)/40);
  x1 = x0;
  out
);

function delay (x0)
instance (x0,x1,x2)
(
  out = x2;
  x2 = x1;
  x1 = x0;
  out
);

function envelope(x,a)
instance (y,a)
(
  y = x + a * (y - x);
  y
);

function logistic(x,k)
(
  1/(1+exp(-k*x))
);


function svf_bandp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 1;
 m2 = 0;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;

 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 
 m0*v0+m1*v1+m2*v2
);

function svf_highp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 1;
 m1 = -k;
 m2 = -1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;

 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 
 m0*v0+m1*v1+m2*v2
);


/******************************* GUI Function ***********************************/

  function button_rect(x,y,w,h)
  (
    mouse_x >= x && mouse_x <= x+w && mouse_y >= y && mouse_y <= y+h ? (
    this.button = 1111;
    ):(
    this.button = 0;
    );
  );

  function mouse_on()//instance(count)
  (
  1 && mouse_cap ? count += 1 : count = 0;
  count > 0 && count < 2 ? m_on =1 : m_on = 0;
  m_on
  );
  
  function mouse_off()
  (
  1 && mouse_cap ? m_off = 0 : m_off = 1;
  m_off
  );
  
  function y_drag(area,cap,m_on,m_off)local(area,cap)instance(up,down,storeY,area,click,cap)
  (
  area && m_on ? area = 1 : area = 0;
  area && mouse_cap && cap ? click = 1;
  m_off == 1 ? click = 0;
  click ? (
    mouse_y < storeY ? (up = 1; down = 0;);
    mouse_y > storeY ? (up = 0; down = 1;);
  );
  mouse_cap != cap ? click = 0;
  storeY == mouse_y ? up=down=0;
  storeY = mouse_y;
  );

@slider



@block
  SAT = 10^((drive*2)/20);
  next_thresh = 10^(thresh_db/20);
  ratio = (ratio_in-1)/ratio_in;
  next_gain=10^(gain_db/20);
  att = exp(-1/(0.001*att_in*srate));
  rel = exp(-1/(0.001*rel_in*srate));
  RMS = exp(-1/(0.001*(att_in*0.2)*srate));
  drive2 = 10^((drive-24)/20);SAT = 10^((drive*2)/20);
  d_thresh = (next_thresh - last_thresh)/samplesblock;
  d_gain = (next_gain - last_gain)/samplesblock;


@sample
noise1 = rand(1)*(srate/96000);
noise1 = svf_bandp(noise1,6.21,2.16);

////input stage////
  spl0 = spl0*leftinsat1.gainshaper_smoother(foo_0);
  spl1 = spl1*righinsat1.gainshaper_smoother(foo_1);

  aspl0 = sqrt(0.004+spl0^2) - sqrt(0.004);
  aspl1 = sqrt(0.004+spl1^2) - sqrt(0.004);
  FM0 = 0.07*aspl0 + spl0*0.05;
  FM1 = 0.07*aspl1 + spl1*0.05;
  spl0 = in.left.svf_highp(spl0,5 + r1 + FM0*SAT + 0.16*spl0,0.77);
  spl1 = in.right.svf_highp(spl1,5 + r2 + FM1*SAT + 0.16*spl1,0.77);

  foo_0 = leftinsat2.gainshaper_detector(drive2*spl0);
  foo_1 = righinsat2.gainshaper_detector(drive2*spl1);
spl0 *= 1.0;
spl1 *= 1.0;
////shift gain into fixed threshold////
  spl0 /= last_thresh;
  spl1 /= last_thresh;

////dB calculation////
  sideTOTAL  = leftabs.AA_abs_square(spl0)*0.5;
  sideTOTAL += righabs.AA_abs_square(spl1)*0.5;
  sideTOTAL = RMSenv.envelope(sideTOTAL,RMS);
  sideTOTAL  = side.AA_sidechain_dB(sideTOTAL);

////GR calculations////
  overdB = -thresh.sidechain_thresh(sideTOTAL,4);
////Attack Release////
  state = sideTOTAL - old_dB;
  state = logistic(state,8);
  envcoef = att*state + rel*(1-state);
  overdB = ATT_REL_env.envelope(overdB,envcoef);
  old_dB = overdB;
////ratio////
  overdB *= ratio;
  sideTOTAL = sidegain.sidechain_gain(-overdB);

////one sample delay////
  spl0 = Rdel.delay(spl0);
  spl1 = Ldel.delay(spl1);

////GR////
  spl0 *= sideTOTAL;
  spl1 *= sideTOTAL;

////output stage////
  spl0 = out.left.svf_highp(spl0,6 + r3 + noise1,0.75);
  spl1 = out.right.svf_highp(spl1,6 + r4 + noise1,0.75);

////shift gain out of fixed threshold////
  spl0 *= last_thresh;
  spl1 *= last_thresh;
  last_thresh += d_thresh;

////output gain////
  spl0 *= last_gain;
  spl1 *= last_gain;
  last_gain += d_gain;



  sideTOTAL = smooth.envelope(sideTOTAL,gr_smooth);
  sideTOTAL < gr_meter ? gr_meter=sideTOTAL : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );


@gfx 1024 512 // request horizontal/vertical heights (0 means dont care)
  
  size = min(gfx_w/1024,gfx_h/512);
  gfx_x=gfx_y=0;
  gfx_blit(0,size,0,0,0,1024,512);
  gfx_blit(5,size,0,0,0,1024,512);

  //new GR meter
  
  gfx_x=384*size; gfx_y=0;
  GRdB = -20*log10(gr_meter);
  GRdB = max(0,min(GRdB,20));
  GRDisplay = floor(GRdB*4)*256;
  gfx_blit(1,size,0,0,GRdisplay,256,256);
 
  /******************************* GUI Control ***********************************/
  
  //load state change
  mouse_on() = m_on;
  mouse_off() = m_off;


  
  //define the button
  input.button_rect(128*size,64*size,128*size,128*size);
  //setup the drag
  input.y_drag(input.button,1,m_on,m_off);//left click drag
  //define what happens
  input.down ? drive=max(drive-=0.5,0);
  input.up ? drive=min(drive+=0.5,31);
  
  //define the button
  Threshold.button_rect(128*size,256*size,128*size,128*size);
  //setup the drag
  Threshold.y_drag(Threshold.button,1,m_on,m_off);//left click drag
  //define what happens
  Threshold.down ? thresh_db=max(thresh_db-=1,-50);
  Threshold.up ? thresh_db=min(thresh_db+=1,10);
  
  //define the button
  ratio.button_rect(344*size,256*size,128*size,128*size);
  //setup the drag
  ratio.y_drag(ratio.button,1,m_on,m_off);//left click drag
  //define what happens
  ratio.down ? ratio_in=max(ratio_in-=0.2,1.2);
  ratio.up ? ratio_in=min(ratio_in+=0.2,12);

  //define the button
  attack.button_rect(554*size,256*size,128*size,128*size);
  //setup the drag
  attack.y_drag(attack.button,1,m_on,m_off);//left click drag
  //define what happens
  attack.down ? att_in=max(att_in -= 0.058*att_in,0.04);
  attack.up ? att_in=min(att_in += 0.058*att_in,30);  
  
  //define the button
  release.button_rect(766*size,256*size,128*size,128*size);
  //setup the drag
  release.y_drag(release.button,1,m_on,m_off);//left click drag
  //define what happens
  release.down ? rel_in=max(rel_in -= 0.045*rel_in,40);
  release.up ? rel_in=min(rel_in += 0.045*rel_in + 0.0,1000);  

  //define the button
  gain.button_rect(766*size,64*size,128*size,128*size);
  //setup the drag
  gain.y_drag(gain.button,1,m_on,m_off);//left click drag
  //define what happens
  gain.down ? gain_db=max(gain_db-=0.2,-9);
  gain.up ? gain_db=min(gain_db+=0.2,22);
  


  
  //GUI
  
  gfx_x=(192-64)*size; gfx_y=64*size;
  gfx_blit(2,size,0,0,floor(drive)*128,128,128);
  
  gfx_x=128*size; gfx_y=290*size;
  gfx_blit(3,size,0,0,floor((thresh_db+50)*0.517)*128,128,128);
  
  gfx_x=(128+213.3)*size; gfx_y=290*size;
  gfx_blit(3,size,0,0,floor((ratio_in-1.2)*2.88)*128,128,128);
  
  gfx_x=(128+213.3*2)*size; gfx_y=290*size;
  gfx_blit(3,size,0,0,floor( ((att_in-0.04)/29.96)^0.4 * 31)*128,128,128);
  
  gfx_x=(128+213.3*3)*size; gfx_y=290*size;
  gfx_blit(3,size,0,0,floor( ((rel_in-40)/960)^0.45 * 31)*128,128,128);
  
  gfx_x=(128+213.3*3)*size; gfx_y=64*size;
  gfx_blit(4,size,0,0,floor(gain_db+9)*128,128,128);
  
  //text
  gfx_r=gfx_g=gfx_b=0.0;
  gfx_x=120*size; gfx_y=480*size;
  gfx_drawstr("GUI test beta, v3");

  gfx_x=252*size; gfx_y=447*size;
  gfx_drawnumber(thresh_db,1);

  gfx_x=438*size; gfx_y=447*size;
  gfx_drawnumber(ratio_in,1);

  gfx_x=864*size; gfx_y=227*size;
  gfx_drawnumber(gain_db,1);
