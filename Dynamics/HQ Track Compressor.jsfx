version:0.3.2beta
desc:HQ Track Compressor (beta)
author:Stephen Boyes
about:
  # HQ Track Compressor
  A normal compressor! featuring a subtle input stage
  and compression that behaves well even with fast attack and no oversampling.
  Featuring Anti-Derivative Anti-Aliaising sidechain elements, this is well suited to
  to the rectifing and hard knee compression components.
Changelog:
  - beta GUI

options:gfx_hz=60
provides:HQ_Track_Compressor/*
provides:HQ_Track_Compressor/HQcomp_back.png

slider1:drive=0<0,31,1>Input Saturation
slider2:thresh_db=0<-50,10,1>Threshold (dB)
slider3:ratio_in=3<1.2,12,0.2>Ratio
slider4:Att_in=5<0.04,30,0.02>Attack (ms)
slider5:Rel_in=200<40,1000,1>Release (ms)

slider10:gain_db=0<-9,22,1>gain (dB)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

filename:0,HQ_Track_Compressor/HQcomp_back.png
filename:1,HQ_Track_Compressor/Vintage_PPM_meter.png
filename:2,HQ_Track_Compressor/simple_red.png
filename:3,HQ_Track_Compressor/simple_silver.png
filename:4,HQ_Track_Compressor/simple_blue.png



@init
  last_thresh = 10^(thresh_db/20);
  last_gain = 10^(gain_db/20);
  gr_meter = 1;
  gr_meter_decay = exp(1/(0.02*srate));
  gr_smooth   = exp(-1/(0.001*3*srate));
  r1 = 0.11*(rand(2)-1);
  r2 = 0.11*(rand(2)-1);
  r3 = 0.12*(rand(2)-1);
  r4 = 0.12*(rand(2)-1);
  ext_gr_meter = 0;
  pdc_delay = 2;
  pdc_bot_ch = 0;
  pdc_top_ch = 2;

function AA_abs_square(x0)
instance (f0,f0n1,x0,x1)
(
  abs(x0-x1) < 2^-19 ? (
    x0 >= 0 ? f0 = 0.5*x0^2;
    x0 <= 0 ? f0 = -0.5*x0^2;
    out = abs(x0-x1);
    ):(
    x0 >= 0 ? f0 = 0.5*x0^2;
    x0 <= 0 ? f0 = -0.5*x0^2;
    out = (f0-f0n1)/(x0-x1);
  );
  x1 = x0;
  f0n1 = f0;
  out
);

function AA_sidechain_dB(x0)
instance (f0,f0n1,x0,x1)
(
  abs(x0-x1) <= 2^-19 ? (
    f0 = 20*(log10(x0)*x0 - (1/log(10))*x0);
    out = -120.4;
    ):(
    f0 = 20*(log10(x0)*x0 - (1/log(10))*x0);
    out = (f0-f0n1)/(x0-x1);
  );
  x1 = x0;
  f0n1 = f0;
  out
);

function sidechain_thresh(x0,knee)
instance (f0,f0n1,x0,x1,knee,in)
(
    in = x0*0.5 + x1*0.5;
    out =   (in/(1+knee^in))-in;
    out += -1/(1+0.25*x0^2);
  x1 = x0;
  out
);

function sidechain_gain(x0)
instance (f0,f0n1,x0,x1)
(
  out = 10^((x0+x1)/40);
  x1 = x0;
  out
);

function delay (x0)
instance (x0,x1,x2)
(
  out = x2;
  x2 = x1;
  x1 = x0;
  out
);

function envelope(x,a)
instance (y,a)
(
  y = x + a * (y - x);
  y
);

function logistic(x,k)
(
  1/(1+exp(-k*x))
);


function svf_bandp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 1;
 m2 = 0;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;

 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 
 m0*v0+m1*v1+m2*v2
);

function svf_highp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 1;
 m1 = -k;
 m2 = -1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;

 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 
 m0*v0+m1*v1+m2*v2
);

@slider
  SAT = 10^((drive*2)/20);
  next_thresh = 10^(thresh_db/20);
  ratio = (ratio_in-1)/ratio_in;
  next_gain=10^(gain_db/20);
  knee = 4;
  k = 8;
  att = exp(-1/(0.001*att_in*srate));
  rel = exp(-1/(0.001*rel_in*srate));
  RMS = exp(-1/(0.001*(att_in*0.2)*srate));
  

@block
  d_thresh = (next_thresh - last_thresh)/samplesblock;
  d_gain = (next_gain - last_gain)/samplesblock;


@sample
noise1 = rand(1)*(srate/96000);
noise1 = svf_bandp(noise1,6.21,2.16);

////input stage////
  aspl0 = sqrt(0.004+spl0^2) - sqrt(0.004);
  aspl1 = sqrt(0.004+spl1^2) - sqrt(0.004);
  FM0 = 0.07*aspl0 + spl0*0.05;
  FM1 = 0.07*aspl1 + spl1*0.05;
  spl0 = in.left.svf_highp(spl0,5 + r1 + FM0*SAT + 0.16*spl0,0.77);
  spl1 = in.right.svf_highp(spl1,5 + r2 + FM1*SAT + 0.16*spl1,0.77);

////shift gain into fixed threshold////
  spl0 /= last_thresh;
  spl1 /= last_thresh;

////dB calculation////
  sideTOTAL  = leftabs.AA_abs_square(spl0)*0.5;
  sideTOTAL += righabs.AA_abs_square(spl1)*0.5;
  sideTOTAL = RMSenv.envelope(sideTOTAL,RMS);
  sideTOTAL  = side.AA_sidechain_dB(sideTOTAL);

////GR calculations////
  overdB = -thresh.sidechain_thresh(sideTOTAL,knee);
////Attack Release////
  state = sideTOTAL - old_dB;
  state = logistic(state,k);
  envcoef = att*state + rel*(1-state);
  overdB = ATT_REL_env.envelope(overdB,envcoef);
  old_dB = overdB;
////ratio////
  overdB *= ratio;
  sideTOTAL = sidegain.sidechain_gain(-overdB);

////one sample delay////
  spl0 = Rdel.delay(spl0);
  spl1 = Ldel.delay(spl1);

////GR////
  spl0 *= sideTOTAL;
  spl1 *= sideTOTAL;

////output stage////
  spl0 = out.left.svf_highp(spl0,6 + r3 + noise1,0.75);
  spl1 = out.right.svf_highp(spl1,6 + r4 + noise1,0.75);

////shift gain out of fixed threshold////
  spl0 *= last_thresh;
  spl1 *= last_thresh;
  last_thresh += d_thresh;

////output gain////
  spl0 *= last_gain;
  spl1 *= last_gain;
  last_gain += d_gain;



  sideTOTAL = smooth.envelope(sideTOTAL,gr_smooth);
  sideTOTAL < gr_meter ? gr_meter=sideTOTAL : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );


@gfx 1024 512 // request horizontal/vertical heights (0 means dont care)
  
  //gfx_r=gfx_g=gfx_b=0.4;
  //gfx_rect(0,0,1024,512);
  gfx_x=gfx_y=0;
  gfx_blit(0,1,0,0,0,1024,512);

  //new GR meter
  
  gfx_x=512-128; gfx_y=0;
  GRdB = -20*log10(gr_meter);
  GRdB = max(0,min(GRdB,20));
  GRDisplay = floor(GRdB*4)*256;
  gfx_blit(1,1,0,0,GRdisplay,256,256);
  
  //GUI
  
  gfx_x=128; gfx_y=64;
  gfx_blit(2,1,0,0,floor(drive*128),128,128);
  
  gfx_x=128; gfx_y=290;
  gfx_blit(3,1,0,0,floor((thresh_db+50)*0.517)*128,128,128);
  
  gfx_x=128+213.3; gfx_y=290;
  gfx_blit(3,1,0,0,floor((ratio_in-1.2)*2.88)*128,128,128);
  
  gfx_x=128+213.3*2; gfx_y=290;
  gfx_blit(3,1,0,0,floor((att_in-0.04)*1.04)*128,128,128);
  
  gfx_x=128+213.3*3; gfx_y=290;
  gfx_blit(3,1,0,0,floor((rel_in-40)*0.0324)*128,128,128);
  
  gfx_x=128+213.3*3; gfx_y=64;
  gfx_blit(4,1,0,0,floor(gain_db+9)*128,128,128);
  
  //text
  gfx_r=gfx_g=gfx_b=0.0;
  gfx_x=120; gfx_y=480;
  gfx_drawstr("GUI test beta, only meter working so far");
  
  gfx_x=160; gfx_y=230;
  gfx_drawstr("   IN");
  
  gfx_x=160; gfx_y=450;
  gfx_drawstr("Threshold");
  
  gfx_x=160+213.3; gfx_y=450;
  gfx_drawstr(" Ratio");
  
  gfx_x=160+213.3*2; gfx_y=450;
  gfx_drawstr(" Attack");
  
  gfx_x=160+213.3*3; gfx_y=450;
  gfx_drawstr(" Release");
  
  gfx_x=160+213.3*3; gfx_y=230;
  gfx_drawstr("  Gain");
  
