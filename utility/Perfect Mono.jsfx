version:1.0.1
desc:Perfect Mono
Author:Stephen Boyes
about:
  # Perfect Mono
  Mono output, without loss of level of hard panned sounds.
  See, Dan Worrel, the problem with LCR mixing, YouTube video.
changelog:
  - version 1
  - First github version
//tags: processing FFT phase mono utility
//
//uses code from phase rotator

slider2:0.5<0.414,0.707,0.001>Side Amount


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

options:gmem=steve42


@init 

  oldslider1=90;
  
 
  phaseadj = -$pi*oldslider1/180.0;
  
  ext_tail_size = 16384;

  fftsize = -1;
  pdc_bot_ch = 0;
  pdc_top_ch = 2;

  // array pointers
  window=0;
  buf0 = 16384;
  buf1 = 32768;


  sliderfft = (2^(2+10))|0;
  fftsize != sliderfft ? (
    pos = 0;
    memset(buf0, 0, 2*fftsize);
    memset(buf1, 0, 2*fftsize);  
    memset(window, 0, fftsize); 
    fftsize = sliderfft;
    w = 2.0*$pi/fftsize;
    i = 0;
    loop(fftsize/2,
      window[i] = 0.42-0.50*cos(i*w)+0.08*cos(2.0*i*w);
      i += 1;
    ); 
    pdc_delay = fftsize;
  );  

  cadj = cos(phaseadj);
  sadj = sin(phaseadj);

@slider





@sample
buf2 = 100000;
buf3 = 200000;


function delay_set(buffer,samp)
 instance(gmem,size,frac,Mpos)
(
  gmem = buffer;
  size = samp;
  frac = size - floor(size);
  size = floor(size);
);

function delay(in)
 instance(Mpos,gmem,old,out,size,frac)
(
  out = gmem[Mpos];
  out = out*(1-frac) + old*frac;
  old = gmem[Mpos];
  gmem[Mpos] = in;
  Mpos += 1;
  Mpos >= size ? Mpos -= size;
  out;
);

delaytime=4096;

delay0.delay_set(buf2,4096);
delay1.delay_set(buf3,4096);



  pos >= fftsize ? (
    tmp = buf0;
    buf0 = buf1;
    buf1 = tmp;
    
    fft(buf0, fftsize);
    fft_permute(buf0, fftsize);

    i = 0;
    loop(fftsize/2, 
      a = i;
      b = a+1;
      x = buf0[a];
      y = buf0[b];
      buf0[a] = x*cadj-y*sadj;
      buf0[b] = x*sadj+y*cadj;

      a = 2*fftsize-i-2;
      b = a+1;
      x = buf0[a];
      y = buf0[b];
      buf0[a] = x*cadj+y*sadj;
      buf0[b] = -x*sadj+y*cadj;

      i += 2);

    fft_ipermute(buf0, fftsize);
    ifft(buf0, fftsize);

    pos=0;
  );

  w1 = window[pos/2];
  w2 = window[(fftsize-pos)/2-1];
  sw = (w1+w2)*fftsize;
  
  out0 = (buf0[pos]+buf1[fftsize+pos])/sw;
  out1 = (buf0[pos+1]+buf1[fftsize+pos+1])/sw;
  
  Mid=(spl0+spl1)*0.5;
  side=(spl0-spl1)*slider2;


  buf0[pos] = w1*side;
  buf0[pos+1] = w1*0;
  buf1[fftsize+pos] = w2*side;
  buf1[fftsize+pos+1] = w2*0;


  side = out0;
  mid = delay1.delay(mid);


  spl0=mid+side;
  spl1=mid+side;

  pos += 2;
