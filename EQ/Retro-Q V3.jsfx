version:3.0.0
desc:Retro-Q V3
Author:Stephen Boyes
about:
  # Retro-Q
  Fixed frequency parellel EQ with vibe.
  Tip, try boosting or cutting all bands the same amount first!
  more EQ = more harmonics.

  SVF filter code from Andy Simper of cytomics
changelog:
  - First github version

//  The MIT License (MIT)
//Copyright © 2023 Stephen Boyes
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.     


//Parrallel state variable filter with mojo
slider1:0<-12,12,0.1>Sub
slider2:0<-12,12,0.1>Low
slider3:0<-12,12,0.1>High
slider4:0<0,1,1{Off,On}>Dynamic Air Boost
slider5:0<0,300,5>Hi-pass
slider6:0<-12,12,0.1>Vibe
slider7:0<-12,12,0.1>output (dB)

-slider10:0<0,500000>actual release constant

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
gr_meter=1;
gr_meter_decay = exp(1/(1*srate));

a = exp(-2*$pi*800/(srate*0.5));
a1 = exp(-2*$pi*200/(srate*0.5));
a2 = exp(-2*$pi*15000/(srate*0.5));


rate=srate/0.7;
invrate=1/(srate/0.7);


ext_tail_size = -2; 


Rspeed = exp(-1/(1.1 * srate));
Rspeed2 = exp(-1/(0.1 * srate));

src_vibe = tgt_vibe = 2^((slider6-3)/6);


function svf_highp(v0,cutoff,Q)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 1;
 m1 = -k;
 m2 = -1;
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 m0*v0+m1*v1+m2*v2
);


function svf_bandp(v0,cutoff,Q,os)
instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
(
 g = tan($pi*cutoff/srate);
 k = 1/Q;
 a1 = 1/(1+g*(g+k));
 a2 = g*a1;
 a3 = g*a2;
 m0 = 0;
 m1 = 1;
 m2 = 0;
loop
(os,
 v3 = v0-ic2eq;
 v1 = a1*ic1eq+a2*v3;
 v2 = ic2eq+a2*ic1eq+a3*v3;
 ic1eq = 2*v1-ic1eq;
 ic2eq = 2*v2-ic2eq;
 );
 m0*v0+m1*v1+m2*v2
);

function compressor_gain (in,Rspeed,invrate,vibe,pink,a)
instance (v,am0,am1,am2,peak,oldpeak)
(
rms = in^2;

x  = rms;
am2 = am1;
am1 = am0;
am0 = v;
v  = x-am2*a;
rms = v*a+am2;

rms += (pink/256)*vibe+(pink/64);  //noisy side chain

rms = sqrt(rms);

GRin=max(0.1,rms);
knee=max(0.7,rms);
knee2=max(1.3,rms);
knee3=max(1.9,rms);
GRin=(GRin+knee+knee2+knee3)*0.25;

peak=GRin-1;   //how far over 1 is the signal

oldpeak=oldpeak*Rspeed-invrate;
oldpeak=max(0,oldpeak);

peak=max(peak,oldpeak);

oldpeak=peak; //store last value

peak=1/(peak+1);   //gain needed to limit the signal to 1 (invert)

peak=min(peak,1);
peak=max(peak,0);
);

function compressor_gaintoo (in,Rspeed,pink,a)
instance (v,am0,am1,am2,GRop,LastGR)
(
rms = in^2;

x  = rms;
am2 = am1;
am1 = am0;
am0 = v;
v  = x-am2*a;
rms = v*a+am2;
rms = sqrt(rms);
rms += (pink/1024);  //noisy side chain

//convert to dB to calculate ratio
GRin = 20*log10(abs(rms));
ratio = (1.25-1)*0.8;
threshold = -50;
GRin = ratio*(max(GRin,threshold)-threshold);
GRop = 10^(GRin*0.05);  //covert to voltage

lastGR = LastGR*Rspeed;
GRop = max(GRop,LastGR);
LastGR = GRop; //store last value
GRop = 1/(GRop);   //gain needed to limit the signal to 1 (invert)

GRop
);

@slider

Sgain=2^(slider1/6)-1;
Lgain=2^(slider2/6)-1;
Hgain=2^(slider3/6)-1;

FcHP1=slider5+0.8;
DHP1=2*sin($pi*FcHP1/(srate));  //limit this?

HPvibe=16+(slider5/10);

tgt_vibe=2^((slider6-3)/6);
outgain=2^(slider7/6);


VqSU=((slider1+24)/480)+0.35;

VqLO=((slider2+24)/480)+0.35;

VqH=((slider3+24)/480)+0.35;

AirOn = slider4;

@block
d_vibe = (tgt_vibe-src_vibe)/samplesblock;
vibe = src_vibe;
src_vibe = tgt_vibe;
slider10 = -1/( log(Rspeed) * 0.001 * srate);

@sample
vibe += d_vibe;


oldernoise=oldnoise;
oldnoise=noise;
noise=rand(1)+rand(1)-1;
pink=noise+oldnoise;
Tapenoise=(pink+oldernoise)*0.000000025;




spl0=spl0-tapenoise*1.8;
spl1=spl1-tapenoise*1.8;


spl0=spl0*vibe;
spl1=spl1*vibe;


comp0 = inL.compressor_gain(spl0,Rspeed,invrate,vibe,pink,a);
comp1 = inR.compressor_gain(spl1,Rspeed,invrate,vibe,pink,a);




x0=comp0;
am20=am10;
am10=am0;
am0=v0;
v0=x0-am20*a1;
comp0=v0*a1+am20;


x1=comp1;
am21=am11;
am11=am1;
am1=v1;
v1=x1-am21*a1;
comp1=v1*a1+am21;





spl0=spl0*comp0;  //Dnynamic saturation gain reduction
spl1=spl1*comp1;  //same



os0=(old0+spl0)/2;
os1=(old1+spl1)/2;
old0=spl0;
old1=spl1;





leftFcH = highL*0.9+highR*0.1;
leftFcH = leftFcH*LH.compressor_gain(0.9*leftFcH,Rspeed,invrate,vibe,pink,a);
leftFcH = min(18000,0.00000002*pink+2000*(1+leftFcH*0.45));
highL = 2.4*highleft.svf_bandp(spl0,leftFcH,VqH,2);

leftFcLO = lowL*0.9+lowR*0.1;
leftFcLO = leftFcLO*LLO.compressor_gain(0.85*leftFcLO,Rspeed,invrate,vibe,pink,a);
leftFcLO = min(20000,max(1,0.00000004*pink+260*(1+leftFcLO*0.4)));
lowL = lowleft.svf_bandp(spl0,leftFcLO,VqLO+0.55,1);

leftFcSU = SubL*0.9+SubR*0.1;
leftFcSU = leftFcSU*LSUB.compressor_gain(0.8*leftFcSU,Rspeed,invrate,vibe,pink,a);
leftFcSU = max(1,0.00000003*pink+40*(1+leftFcSU*0.35));
SubL = subleft.svf_bandp(spl0,leftFcSU,Vqsu+0.35,1);

AirOn ? (
  Air0 = spl0*Gair0;  Gair0 = LE.compressor_gaintoo(Air0,rspeed2,pink,a2);
  Air0 = airleft.svf_bandp(Air0,11000,0.9,1);
  AirL = 0.7*Air0;
):(
  AirL = 0;
);

spl0=spl0+AirL+highL*Hgain+lowL*Lgain+SubL*Sgain;








highR = 2.4*highright.svf_bandp(spl1,rightFcH,VqH,2);
rightFcH = highR*0.9+highL*0.1;
rightFcH = rightFcH*RH.compressor_gain(0.9*righFcH,Rspeed,invrate,vibe,pink,a);
rightFcH = min(18000,0.00000002*pink+2000*(1+rightFcH*0.45));

lowR = lowright.svf_bandp(spl1,rightFcLO,VqLO+0.55,1);
rightFcLO = lowR*0.9+lowL*0.1;
rightFcLO = rightFcLO*RLO.compressor_gain(0.85*righFcLO,Rspeed,invrate,vibe,pink,a);
rightFcLO = min(20000,max(1,0.00000004*pink+260*(1+rightFcLO*0.4)));

SubR = subright.svf_bandp(spl1,rightFcSU,Vqsu+0.35,1);
rightFcSU = SubR*0.9+SubL*0.1;
rightFcSU = rightFcSU*RSUB.compressor_gain(0.8*righFcSU,Rspeed,invrate,vibe,pink,a);
rightFcSU = max(1,0.00000003*pink+40*(1+rightFcSU*0.35));

AirOn ? (
  Air1 = spl1*Gair1; Gair1 = RI.compressor_gaintoo(Air1,rspeed2,pink,a2);
  Air1 = airright.svf_bandp(Air1,11000,0.9,1);
  AirR = 0.7*Air1;
):(
  AirR = 0;
);

spl1=spl1+AirR+highR*Hgain+lowR*Lgain+SubR*Sgain;






//high pass 1
spl0 = left1.svf_highp(spl0*HPvibe0,FcHP1,0.618);
 HPvibe0 = spl0*HPL.compressor_gain(0.85*spl0,Rspeed,invrate,vibe,pink,a);
 HPvibe0 = 0.001*tapenoise+DHP1*HPvibe0+1;//modulate input

spl1 = right1.svf_highp(spl1*HPvibe1,FcHP1,0.618);
 HPvibe1 = spl1*HPR.compressor_gain(0.85*spl1,Rspeed,invrate,vibe,pink,a);
 HPvibe1 = 0.001*tapenoise+DHP1*HPvibe1+1;//modulate input

//high pass 2
spl0 = left2.svf_highp(1.01*spl0,4,0.618);
spl1 = right2.svf_highp(1.01*spl1,4,0.618);




spl0=tapenoise*1+spl0*(1/vibe)*outgain;
spl1=tapenoise*1+spl1*(1/vibe)*outgain;





spl0 = spl0/comp0;  //restore gain from safety limiter
spl1 = spl1/comp1;  //restore gain


/*
Tpeak = max(Gair0,Gair1);
Tpeak < gr_meter ? gr_meter=Tpeak : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );


/*@gfx 0 32 // request horizontal/vertical heights (0 means dont care)

  gr_meter *= exp(1/30); gr_meter>1?gr_meter=1; // decay meter here so if the audio processing stops it doesnt "stick"
  gfx_r=1; gfx_g=gfx_b=0; gfx_a=0.8;
  
  meter_bot=20;
  meter_h=min(gfx_h,32);
  xscale=gfx_w*20/meter_bot;

  gfx_y=0;
  gfx_x=gfx_w + log10(gr_meter)*xscale;
  gfx_rectto(gfx_w,meter_h);

  gfx_r=gfx_g=gfx_b=1.0; gfx_a=0.6;

  s2=sqrt(2)/2;
  g = s2;
  while(
    gfx_x=gfx_w + log10(g)*xscale;
    gfx_x >= 0 ? 
    (
      gfx_y=0;
      gfx_lineto(gfx_x,meter_h,0);
      gfx_y=meter_h-gfx_texth;
      gfx_x+=2;
      gfx_drawnumber(log10(g)*20,0);
      gfx_drawchar($'d');
      gfx_drawchar($'B');
    );
    g*=s2;
    gfx_x >=0;
  );
  gfx_a=1;

  gfx_x=0; gfx_y=meter_h/2 - gfx_texth/2;
  gfx_drawnumber(log10(gr_meter)*20,1);
  gfx_drawchar($'d');
  gfx_drawchar($'B');

