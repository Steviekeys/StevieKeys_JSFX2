desc:Odd n Even Saturation
version:1.3
author:Stephen Boyes

//Can be used to add vibe or as a maximiser


//                                                                
//  The MIT License (MIT)
//Copyright © 2023 Stephen Boyes
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                            
//                                                                              
//                                                                              







slider1:0<-6,6,0.1>Input
slider2:0.9<0,1,0.01>Amount
slider3:0<-6,6,0.1>Output



in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size = -1; //automatic silence detection

cutoff = 0.2;
//coeff = exp(-2*$pi*cutoff/srate);


/*
function smooth_clip2(x)
instance (a0,b0,c0,d0,e0,clip0)
(
clip0 = max(-1,min(1,x));
a0 = sign(x)*(sign(x)*x)^(1/3);
b0 = (3*clip0-clip0^3)*0.5;
c0 = abs(sin(($pi*x^3)/2));
d0 = a0*c0+b0*(1-c0);
x >=  1 ? e0 = a0;  x <   1 ? e0 = d0;  x <  -1 ? e0 = a0;
0.8*e0
);
*/


@slider
IG = 2^(slider1/6);
IG2 = 2^(-slider2*0.8);
S1 = slider2*0.5;
D1 = 1-S1;
S2 = S1*2;
D2 = 1-S2;
OG = 2^(slider3/6);


@sample
//input gain//
spl0 = spl0*IG*IG2;
spl1 = spl1*IG*IG2;


//sat1 gain//
X0 = (-spl0+1)*0.382683;
X1 = (-spl1+1)*0.382683;

//even saturation 1//
wet0 = 8*(X0^4)-8*(X0^2)+1-0.00000187195422;
wet1 = 8*(X1^4)-8*(X1^2)+1-0.00000187195422;

spl0 = spl0*D1+wet0*S1;
spl1 = spl1*D1+wet1*S1;


//sat2 gain//
X0 = (-spl0-1)*0.258818;
X1 = (-spl1-1)*0.258818;

//even saturation 2//
wet0 = 32*(X0^6)-48*(X0^4)+18*(X0^2)-0.999993508182465;
wet1 = 32*(X1^6)-48*(X1^4)+18*(X1^2)-0.999993508182465;


spl0 = spl0*D2+wet0*S2;
spl1 = spl1*D2+wet1*S2;


spl0 = spl0*OG;
spl1 = spl1*OG;

//otm1 = coeff*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
//otm2 = coeff*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;


//spl0 = le.smooth_clip2(spl0);
//spl1 = ri.smooth_clip2(spl1);

spl0 = max(-1,min(1,spl0));
spl1 = max(-1,min(1,spl1));
