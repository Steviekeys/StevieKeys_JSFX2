version: 1.4.1
desc: Odd n Even Saturation
author: Stephen Boyes
about:
  # Odd n Even saturation
  Two stage polynomial waveshping saturation, feturing *odd and even harmonics*.
  Can be used to add vibe or as a maximiser.
changelog:
  - CPU boost


//                                                                
//  The MIT License (MIT)
//Copyright © 2023 Stephen Boyes
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                            
//                                                                              
//                                                                              



slider1:0<-6,6,0.1>Input
slider2:0.9<0,1,0.01>Amount
slider3:0<-6,6,0.1>Output
slider4:0<0,1,1{Off,On}>DC blocker


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size = -1; //automatic silence detection

Fc = 1/srate;
a = exp(-2*$pi*Fc);
b = 1-a;

function DCblocker(in,b)
instance(y)
(
y += b*(in-y);
in-y
);


@slider
IG = 2^(slider1/6);
IG2 = 2^(-slider2*0.8);
S1 = slider2*0.5;
D1 = 1-S1;
S2 = S1*2;
D2 = 1-S2;
OG = 2^(slider3/6);


@sample
//input gain//
spl0 = spl0*IG*IG2;
spl1 = spl1*IG*IG2;

//sat1 gain//
X0 = (-spl0+1)*0.382683;
X1 = (-spl1+1)*0.382683;

//even saturation 1//
wet0 = 8*((X0*X0)*(X0*X0))-8*(X0*X0)+1-0.00000187195422;
wet1 = 8*((X1*X1)*(X1*X1))-8*(X1*X1)+1-0.00000187195422;

//dry wet mix
spl0 = spl0*D1+wet0*S1;
spl1 = spl1*D1+wet1*S1;

//sat2 gain//
X0 = (-spl0-1)*0.258818;
X1 = (-spl1-1)*0.258818;

//even saturation 2//
wet0 = 32*(X0^6)-48*((X0*X0)*(X0*X0))+18*(X0*X0)-0.999993508182465;
wet1 = 32*(X1^6)-48*((X1*X1)*(X1*X1))+18*(X1*X1)-0.999993508182465;

//dry wet mix
spl0 = spl0*D2+wet0*S2;
spl1 = spl1*D2+wet1*S2;

//output gain
spl0 = spl0*OG;
spl1 = spl1*OG;

spl0 = max(-1,min(1,spl0))*0.996;
spl1 = max(-1,min(1,spl1))*0.996;

slider4 == 1 ? (
spl0 = le.DCblocker(spl0,b);
spl1 = ri.DCblocker(spl1,b);
);
