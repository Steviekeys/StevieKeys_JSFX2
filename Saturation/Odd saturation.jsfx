version:1.2.0
desc:Odd Saturation
author: Stephen Boyes
about:
  # Odd saturation
  Two waveshping saturation styles using sin() functions, feturing *odd harmonics*.
  *Wavy Top, no discontinueties but may fold the wavefom over a bit at some settings.
  *Flat Top, waveform flatens off at 0dB.
  Can be used to add vibe or as a maximiser.
changelog:
  - Optimise code using sin rather than cos
  - Add Flat Top option
  - First github version


//                                                                
//  The MIT License (MIT)
//Copyright © 2023 Stephen Boyes
//
//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”),
// to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                            
//                                                                              
//                                                                              




slider1:0<-12,12,0.1>Input
slider2:0<0,1,0.01>Amount
slider3:0<-12,6,0.1>Output
slider4:0<-12,6,0.1>Max Output
slider6:0<0,1,1{mk1 (Wavy Top),mk2 (Flat Top)}>Waveshape Type



in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
ext_tail_size = -1; //automatic silence detection
halfpi = $pi/2;
IG = 0.7071;


@slider
IG2 = 2^(slider1/6);
S = slider2;
D = 1-S;
OG = 2^(slider3/6);
MXO = 2^(slider4/6);

@sample

//input gain//
spl0 = spl0*IG2;
spl1 = spl1*IG2;
Wet0 = spl0*IG;
Wet1 = spl1*IG;

//odd saturation//
slider6 == 0 ?
(
  wet0 = sin((sin(wet0)+wet0*0.5));
  wet1 = sin((sin(wet1)+wet1*0.5));
):(
  Wet0 = max(-$pi,min($pi,Wet0));
  Wet1 = max(-$pi,min($pi,Wet1));
  wet0 = sin(halfpi*sin(halfpi*sin(0.5*wet0)));
  wet1 = sin(halfpi*sin(halfpi*sin(0.5*wet1)));
);

//mix
spl0 = spl0*D+wet0*S;
spl1 = spl1*D+wet1*S;

spl0 = spl0*OG;
spl1 = spl1*OG;

spl0 = max(-MXO,min(MXO,spl0));
spl1 = max(-MXO,min(MXO,spl1));

